name: The Crystal Programming Language
description: A language for humans and computers
url: https://crystal-lang.org
logo: /assets/media/crystal_logo.svg

future: true

sass:
  style: compressed

humanize:
    date_format: "%m/%d/%Y"

collections:
  releases:
    output: true
  style_guide:
    output: false

defaults:
  -
    scope:
      path: ""
      type: pages
    values:
      image: /assets/icon.png
      layout: page
  -
    scope:
      path: ""
      type: posts
    values:
      image: /assets/icon.png
      layout: post
      is_post: true
  -
    scope:
      path: "install"
      type: pages
    values:
      image: /assets/icon.png
      layout: install
      permalink: /install/:basename/
  -
    scope:
      path: ""
      type: releases
    values:
      layout: post
      permalink: /:year/:month/:day/:title.html
      image: /assets/icon.png
      class: release

twitter:
  username: CrystalLanguage

exclude:
- "*.nix"
- docker-compose.yml
- docker-compose.*.yml
- Gemfile
- Gemfile.lock
- Makefile
- Rakefile
- README.md
- /scripts/
- vendor
- netlify.toml

highlighter: rouge
markdown: kramdown
kramdown:
  syntax_highlighter: rouge
  syntax_highlighter_opts:
    default_lang: crystal
    # block:
    #   css_class: code_section

repository: crystal-lang/crystal-website

webp:
  enabled: true

  # The quality of the webp conversion 0 to 100 (where 100 is least lossy)
  quality: 75

  # List of directories containing images to optimize, nested directories will only be checked if `nested` is true
  # By default the generator will search for a folder called `/img` under the site root and process all jpg, png and tiff image files found there.
  img_dir: ["/assets","/assets/authors", "/assets/sponsors", "/assets/home"]

  # Whether to search in nested directories or not
  nested: false

  # add ".gif" to the format list to generate webp for animated gifs as well
  formats: [".jpeg", ".jpg", ".png", ".tiff"]

  # File extensions for animated gif files
  gifs: [".gif"]

  # Set to true to always regenerate existing webp files
  regenerate: false

  # Local path to the WebP utilities to use (relative or absolute)
  # Omit or leave as nil to use the utilities shipped with the gem, override only to use your local install
  # Eg : "/usr/local/bin/cwebp"
  # webp_path: nil

  # List of files or directories to exclude
  # e.g. custom or hand generated webp conversion files
  # exclude: []

  # append '.webp' to filename after original extension rather than replacing it.
  # Default transforms `image.png` to `image.webp`, while changing to true transforms `image.png` to `image.png.webp`
  append_ext: false

callouts: ["Thank you", "NOTE"]
